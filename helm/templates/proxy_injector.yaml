{{ if .Values.Proxy.AutoInjectEnabled }}
---
###
### Proxy Injector
###
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: linkerd-proxy-injector
  namespace: {{.Values.Namespace}}
  labels:
    {{.Values.Controller.ComponentLabel}}: proxy-injector
  annotations:
    {{.Values.Internal.CreatedByAnnotation}}: {{.Values.CliVersion}}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{.Values.Controller.ComponentLabel}}: proxy-injector
  template:
    metadata:
      labels:
        {{.Values.Controller.ComponentLabel}}: proxy-injector
      annotations:
        {{.Values.Internal.CreatedByAnnotation}}: {{.Values.CliVersion}}
    spec:
      serviceAccountName: linkerd-proxy-injector
      containers:
      - name: proxy-injector
        image: {{.Values.Controller.Image}}
        imagePullPolicy: {{.Values.ImagePullPolicy}}
        args:
        - "proxy-injector"
        - "-controller-namespace={{.Values.Namespace}}"
        - "-log-level={{.Values.Controller.LogLevel}}"
        - "-no-init-container={{.Values.NoInitContainer}}"
        - "-tls-enabled={{.Values.TLS.Enabled}}"
        ports:
        - name: proxy-injector
          containerPort: 8443
        volumeMounts:
        - name: proxy-spec
          mountPath: /var/linkerd-io/config
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 9995
          failureThreshold: 7
        {{- if .Values.EnableHA }}
        resources:
          requests:
            cpu: 20m
            memory: 50Mi
        {{- end }}
        securityContext:
          runAsUser: {{.Values.Controller.UID}}
      volumes:
      - name: proxy-spec
        configMap:
          name: linkerd-proxy-injector-sidecar-config
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: {{.Values.Namespace}}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-{{.Values.Namespace}}-proxy-injector
rules:
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations"]
  verbs: ["create", "update", "get", "watch"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-{{.Values.Namespace}}-proxy-injector
subjects:
- kind: ServiceAccount
  name: linkerd-proxy-injector
  namespace: {{.Values.Namespace}}
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-{{.Values.Namespace}}-proxy-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: {{.Values.Namespace}}
  labels:
    {{.Values.Controller.ComponentLabel}}: proxy-injector
  annotations:
    {{.Values.Internal.CreatedByAnnotation}}: {{.Values.CliVersion}}
spec:
  type: ClusterIP
  selector:
    {{.Values.Controller.ComponentLabel}}: proxy-injector
  ports:
  - name: proxy-injector
    port: 443
    targetPort: proxy-injector
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-proxy-injector-sidecar-config
  namespace: {{.Values.Namespace}}
  labels:
    {{.Values.Controller.ComponentLabel}}: proxy-injector
  annotations:
    {{.Values.Internal.CreatedByAnnotation}}: {{.Values.CliVersion}}
data:
  {{.Values.Proxy.InitSpecFileName}}: |
    args:
    - --incoming-proxy-port
    - {{.Values.InboundPort}}
    - --outgoing-proxy-port
    - {{.Values.Ports.Outbound}}
    - --proxy-uid
    - {{.Values.Proxy.UID}}
    {{- if ne (len .Values.Ports.IgnoreInbound) 0}}
    - --inbound-ports-to-ignore
    - {{.Values.Ports.IgnoreInbound}}
    {{- end }}
    {{- if ne (len .Values.IgnorePorts.Outbounds) 0}}
    - --outbound-ports-to-ignore
    - {{.Values.IgnorePorts.Outbounds}}
    {{- end}}
    image: {{.Values.Proxy.InitImage}}
    imagePullPolicy: IfNotPresent
    name: linkerd-init
    securityContext:
      capabilities:
        add:
        - NET_ADMIN
      privileged: false
      runAsNonRoot: false
      runAsUser: 0
    terminationMessagePolicy: FallbackToLogsOnError
  {{.Values.Proxy.SpecFileName}}: |
    env:
    - name: LINKERD2_PROXY_LOG
      value: {{.Values.Proxy.LogLevel}}
    - name: LINKERD2_PROXY_CONTROL_URL
      value: tcp://linkerd-destination.{{.Values.Namespace}}.svc.cluster.local:{{.Values.Ports.DestinationAPI}}
    - name: LINKERD2_PROXY_CONTROL_LISTENER
      value: tcp://0.0.0.0:{{.Values.Proxy.ControlPort}}
    - name: LINKERD2_PROXY_METRICS_LISTENER
      value: tcp://0.0.0.0:{{.Values.Proxy.MetricsPort}}
    - name: LINKERD2_PROXY_OUTBOUND_LISTENER
      value: tcp://127.0.0.1:{{.Values.Ports.Outbound}}
    - name: LINKERD2_PROXY_INBOUND_LISTENER
      value: tcp://0.0.0.0:{{.Values.InboundPort}}
    - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
      value: {{.Values.ProfileSuffixes}}
    - name: LINKERD2_PROXY_POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    {{- if .Values.InboundAcceptKeepaliveMs }}
    - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
      value: {{.Values.InboundAcceptKeepaliveMs}}ms
    {{- end}}
    {{- if .Values.OutboundConnectKeepaliveMs }}
    - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
      value: {{.Values.OutboundConnectKeepaliveMs}}ms
    {{- end}}
    - name: LINKERD2_PROXY_ID
      value: "" # this value will be computed by the webhook
    {{- if .Values.TLS.Enabled }}
    - name: LINKERD2_PROXY_TLS_TRUST_ANCHORS
      value: /var/linkerd-io/trust-anchors/{{.Values.TLS.TrustAnchorFileName}}
    - name: LINKERD2_PROXY_TLS_CERT
      value: /var/linkerd-io/identity/{{.Values.TLS.CertFileName}}
    - name: LINKERD2_PROXY_TLS_PRIVATE_KEY
      value: /var/linkerd-io/identity/{{.Values.TLS.PrivateKeyFileName}}
    - name: LINKERD2_PROXY_TLS_POD_IDENTITY
      value: "" # this value will be computed by the webhook
    - name: LINKERD2_PROXY_CONTROLLER_NAMESPACE
      value: {{.Values.Namespace}}
    - name: LINKERD2_PROXY_TLS_CONTROLLER_IDENTITY
      value: "" # this value will be computed by the webhook
    {{- end}}
    image: {{.Values.Proxy.Image}}
    imagePullPolicy: IfNotPresent
    livenessProbe:
      httpGet:
        path: /metrics
        port: {{.Values.Proxy.MetricsPort}}
      initialDelaySeconds: 10
    name: linkerd-proxy
    ports:
    - containerPort: {{.Values.InboundPort}}
      name: linkerd-proxy
    - containerPort: {{.Values.Proxy.MetricsPort}}
      name: linkerd-metrics
    readinessProbe:
      httpGet:
        path: /metrics
        port: {{.Values.Proxy.MetricsPort}}
      initialDelaySeconds: 10
    {{- if or .Values.Proxy.ResourceRequestCPU .Values.Proxy.ResourceRequestMemory .Values.Proxy.ResourceLimitCPU .Values.Proxy.ResourceLimitMemory }}
    resources:
      {{- if or .Values.Proxy.ResourceRequestCPU .Values.Proxy.ResourceRequestMemory }}
      requests:
        {{- if .Values.Proxy.ResourceRequestCPU }}
        cpu: {{.Values.Proxy.ResourceRequestCPU}}
        {{- end }}
        {{- if .Values.Proxy.ResourceRequestMemory }}
        memory: {{.Values.Proxy.ResourceRequestMemory}}
        {{- end }}
      {{- end }}
      {{- if or .Values.Proxy.ResourceLimitCPU .Values.Proxy.ResourceLimitMemory }}
      limits:
        {{- if .Values.Proxy.ResourceLimitCPU }}
        cpu: {{.Values.Proxy.ResourceLimitCPU}}
        {{- end }}
        {{- if .Values.Proxy.ResourceLimitMemory }}
        memory: {{.Values.Proxy.ResourceLimitMemory}}
        {{- end }}
      {{- end }}
    {{- end }}
    securityContext:
      runAsUser: {{.Values.Proxy.UID}}
    terminationMessagePolicy: FallbackToLogsOnError
    {{- if .Values.TLS.Enabled }}
    volumeMounts:
    - mountPath: /var/linkerd-io/trust-anchors
      name: {{.Values.TLS.TrustAnchorVolumeName}}
      readOnly: true
    - mountPath: /var/linkerd-io/identity
      name: {{.Values.TLS.SecretsVolumeName}}
      readOnly: true
    {{- end }}
  {{.Values.TLS.TrustAnchorVolumeSpecFileName}}: |
    name: {{.Values.TLS.TrustAnchorVolumeName}}
    configMap:
      name: {{.Values.TLS.TrustAnchorConfigMapName}}
      optional: true
  {{.Values.TLS.IdentityVolumeSpecFileName}}: |
    name: {{.Values.TLS.SecretsVolumeName}}
    secret:
      secretName: "" # this value will be computed by the webhook
      optional: true
{{ end -}}
