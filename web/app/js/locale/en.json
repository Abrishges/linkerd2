{
  "callToAction": {
    "Controller successfully installed": "Controller successfully installed",
    "message1": "No {{resource}}s detected",
    "message2": "{{count}} {{resource}} detected",
    "message2_plural": "{{count}} {{resource}}s detected",
    "message3": "Connect yout first {{resource}}",
    "The service mesh was successfully installed!": "The service mesh was successfully installed!"
  },
  "check": {
    "'linkerd-config' config map exists": "'linkerd-config' config map exists",
    "[kubernetes] control plane can talk to Kubernetes": "[kubernetes] control plane can talk to Kubernetes",
    "[prometheus] control plane can talk to Prometheus": "[prometheus] control plane can talk to Prometheus",
    "can determine the latest version": "can determine the latest version",
    "can query the control plane API": "can query the control plane API",
    "control plane ClusterRoleBindings exist": "control plane ClusterRoleBindings exist",
    "control plane ClusterRoles exist": "control plane ClusterRoles exist",
    "control plane CustomResourceDefinitions exist": "control plane CustomResourceDefinitions exist",
    "control plane is up-to-date": "control plane is up-to-date",
    "control plane MutatingWebhookConfigurations exist": "control plane MutatingWebhookConfigurations exist",
    "control plane Namespace exists": "control plane Namespace exists",
    "control plane pods are ready": "control plane pods are ready",
    "control plane PodSecurityPolicies exist": "control plane PodSecurityPolicies exist",
    "control plane replica sets are ready": "control plane replica sets are ready",
    "control plane self-check": "control plane self-check",
    "control plane ServiceAccounts exist": "control plane ServiceAccounts exist",
    "control plane ValidatingWebhookConfigurations exist": "control plane ValidatingWebhookConfigurations exist",
    "controller pod is running": "controller pod is running",
    "heartbeat ServiceAccount exist": "heartbeat ServiceAccount exist",
    "is running the minimum Kubernetes API version": "is running the minimum Kubernetes API version",
    "Linkerd Check": "Linkerd Check",
    "no unschedulable pods": "no unschedulable pods",
    "Re-Run Check": "Re-Run Check",
    "Run Linkerd Check": "Run Linkerd Check"
  },
  "common": {
    "All Namespaces": "All Namespaces",
    "Apex Service": "Apex Service",
    "Best": "Best",
    "Bytes / sec": "Bytes / sec",
    "Cancel": "Cancel",
    "Close": "Close",
    "Community": "Community",
    "Components": "Components",
    "Configuration": "Configuration",
    "Conn": "Conn",
    "Connections": "Connections",
    "Control Plane": "Control Plane",
    "Control plane components": "Control plane components",
    "Count": "Count",
    "Create Service Profile": "Create Service Profile",
    "Daemon Sets": "Daemon Sets",
    "Data plane proxies": "Data plane proxies",
    "Direction": "Direction",
    "Documentation": "Documentation",
    "Download": "Download",
    "Edges": "Edges",
    "Error": "Error",
    "Filter by text": "Filter by text",
    "filters": "filters",
    "for hints": "for hints",
    "GRPC status": "GRPC status",
    "Headers": "Headers",
    "Hide filters": "Hide $t(filters)",
    "HTTP method": "HTTP method",
    "HTTP metrics": "HTTP $t(metrics)",
    "HTTP status": "HTTP status",
    "Identity": "Identity",
    "Inbound": "Inbound",
    "Last": "Last",
    "Latency": "Latency",
    "Leaf Service": "Leaf Service",
    "List calls": "List calls",
    "Live Calls": "Live Calls",
    "Mailing List": "Mailing List",
    "Max RPS": "Max $t(RPS)",
    "meshed": "meshed",
    "Meshed": "Meshed",
    "Meshed pods": "$t(Meshed) pods",
    "Meshed Status": "$t(Meshed) Status",
    "Method": "Method",
    "metrics": "metrics",
    "Name": "Name",
    "Namespace": "Namespace",
    "New service profile": "New service profile",
    "No": "No",
    "No data present.": "No data present.",
    "No data to display": "No data to display",
    "No messages to display": "No messages to display",
    "no traffic": "no traffic",
    "Outbound": "Outbound",
    "P50 Latency": "P50 $t(Latency)",
    "P95 Latency": "P95 $t(Latency)",
    "P99": "P99",
    "P99 Latency": "P99 $t(Latency)",
    "Page not found.": "Page not found.",
    "Path": "Path",
    "Pod Status": "Pod Status",
    "Pods": "Pods",
    "Pods are initializing": "Pods are initializing",
    "Read Bytes / sec": "Read $t(Bytes / sec)",
    "Request Details": "Request Details",
    "Request Init": "Request Init",
    "Reset": "Reset",
    "Resource": "Resource",
    "Response End": "Response End",
    "Response Init": "Response Init",
    "Response Length (B)": "Response Length (B)",
    "Route": "Route",
    "Route Metrics": "Route Metrics",
    "RPS": "RPS",
    "Scheme": "Scheme",
    "Secured": "Secured",
    "see": "see",
    "Select namespace...": "Select namespace...",
    "Service": "Service",
    "Service mesh details": "Service mesh details",
    "Show more filters": "Show more $t(filters)",
    "SR": "SR",
    "Start": "Start",
    "Stop": "Stop",
    "Success": "Success",
    "Success Rate": "Success Rate",
    "Tap": "Tap",
    "TCP": "TCP",
    "TCP metrics": "$t(TCP) $t(metrics)",
    "To Namespace": "To $t(Namespace)",
    "Tools": "Tools",
    "Traffic Split": "Traffic Split",
    "unmeshed": "unmeshed",
    "Value": "Value",
    "Weight": "Weight",
    "Workloads": "Workloads",
    "Worst": "Worst",
    "Write Bytes / sec": "Write $t(Bytes / sec)",
    "Yes": "Yes"
  },
  "edgesTable": {
    "message1": "$t(Edges) ($t(Identity): {{identity}})"
  },
  "errors": {
    "message1": "Errors in {{type}} {{name}}",
    "Some of these error messages are very long. Show full error text?": "Some of these error messages are very long. Show full error text?"
  },
  "meshedStatusTable": {
    "message1": "{{meshedPods}} out of {{totalPods}} running or pending pods are in the mesh {{percent}}",
    "message2": "{{failedPods}} failed pods"
  },
  "namespaceConfirmationModal": {
    "Change namespace?": "Change namespace?",
    "message1": "The resource you are viewing is in a different namespace than the namespace you have selected. Do you want to change the namespace from {{selectedNamespace}} to {{newNamespace}}?"
  },
  "profileMessages": {
    "message1": "To create a service profile, download a profile and then apply it with `kubectl apply`.",
    "message2": "Service name must consist of lower case alphanumeric characters or start with an alphabetic character, and end with an alphanumeric character",
    "message3": "Namespace must consist of lower case alphanumeric characters or must start and end with an alphanumeric character",
    "message4": "No named route traffic found. This could be because the service is not receiving any traffic, or because there is no service profile configured. Does the service have a service profile?"
  },
  "queryToCliCmd": {
    "message1": "Current {{cmdName}} query"
  },
  "serviceMesh": {
    "incompleteMeshMessage": "Add {{name}} to the k8s.yml file<br/><br/>Then run <6>linkerd inject k8s.yml | kubectl apply -f -</6> to add it to the service mesh",
    "incompleteMeshMessage_plural": "Add one or more resources to the k8s.yml file<br/><br/>Then run <6>linkerd inject k8s.yml | kubectl apply -f -</6> to add them to the service mesh",
    "message1": "All namespaces have a {{productName}} install.",
    "message2": "{{count}} namespace has no meshed resources.",
    "message2_plural": "{{count}} namespaces have no meshed resources.",
    "message3": "{{type}} {{name}} is not in a mesh.",
    "message4": "{{name}} version",
    "message5": "{{name}} namespace",
    "No resources detected.": "No resources detected."
  },
  "statusTable": {
    "Added to mesh": "Added to mesh",
    "has not been started": "has not been started",
    "is up and running": "is up and running",
    "message1": "Uptime: {{uptime}} ({{uptimeSec}}s)",
    "Not in mesh": "Not in mesh"
  },
  "tapQueryForm": {
    "Display requests with paths that start with this prefix": "Display requests with paths that start with this prefix",
    "Display requests with this :authority": "Display requests with this :authority",
    "Display requests with this HTTP method": "Display requests with this HTTP method",
    "Display requests with this scheme": "Display requests with this scheme",
    "FROM": "FROM",
    "message1": "Maximum requests per second to tap. Default {{defaultMaxRps}}",
    "TO": "TO",
    "To Resource": "To $t(Resource)"
  },
  "topRoutes": {
    "Namespace of target resource": "Namespace of target resource",
    "Namespace to query": "Namespace to query",
    "Resource to query": "Resource to query",
    "Target resource": "Target resource",
    "Traffic does not match any configured routes": "Traffic does not match any configured routes",
    "You can also create a new profile": "You can also create a new profile"
  },
  "version": {
    "Linkerd is up to date.": "Linkerd is up to date.",
    "message1": "Running {{name}}",
    "message2": "A new version ({{latestVersion}}) is available.",
    "message3": "Version check failed{{error}}.",
    "Update Now": "Update Now"
  },
  "ws": {
    "message1": "Websocket close error {{error}}",
    "message2": "Websocket error: {{error}}"
  }
}
